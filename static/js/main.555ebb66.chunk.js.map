{"version":3,"sources":["hash.js","App.js","config.js","serviceWorker.js","index.js"],"names":["hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","oauth2Endpoint","scopes","r","require","userAgent","clientId","clientSecret","username","password","num","Math","floor","random","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","token","author_name","html","width","height","class","YouTubeClientID","YouTubeClientSecret","YouTubeRedirect","userId","videoId","playlistId","getSubmission","bind","assertThisInitialized","getCredentials","validateToken","getYouTubeData","getVideoId","addToPlaylist","createPlaylist","_this2","axios","get","then","response","setState","data","web","client_id","client_secret","redirect_uris","_this3","config","headers","Authorization","Accept","items","map","id","method","url","console","log","_this4","href","getSubreddit","getTop","time","limit","sub","push","media_embed","content","setTimeout","videoIdList","undefined","_this5","Content-Type","snippet","title","description","tags","defaultLanguage","status","privacyStatus","_this6","position","resourceId","kind","_token","access_token","reload","react_default","a","createElement","className","style","background","padding","dangerouslySetInnerHTML","__html","onMouseEnter","addId","border","type","onClick","refreshPage","concat","toString","join","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.555ebb66.chunk.js","sourcesContent":["const hash = window.location.hash\r\n  .substring(1)\r\n  .split(\"&\")\r\n  .reduce(function(initial, item) {\r\n    if (item) {\r\n      var parts = item.split(\"=\");\r\n      initial[parts[0]] = decodeURIComponent(parts[1]);\r\n    }\r\n    return initial;\r\n  }, {});\r\nwindow.location.hash = \"\";\r\n\r\nexport default hash;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport hash from './hash';\r\nimport { RedditclientId, RedditclientSecret, Redditusername, Redditpassword } from './config';\r\n// import { InboxStream, CommentStream, SubmissionStream } from \"snoostorm\";\r\n\r\nconst oauth2Endpoint = 'https://accounts.google.com/o/oauth2/v2/auth';\r\nconst scopes = [\r\n\t'https://www.googleapis.com/auth/youtube',\r\n\t'https://www.googleapis.com/auth/youtube.readonly',\r\n\t'https://www.googleapis.com/auth/youtubepartner',\r\n\t'https://www.googleapis.com/auth/youtube.force-ssl'\r\n];\r\n\r\nconst Snoowrap = require('snoowrap');\r\n\r\n/* Working on the Reddit API*/\r\nconst r = new Snoowrap({\r\n\tuserAgent: 'reddit-bot-example-node',\r\n\tclientId: RedditclientId,\r\n\tclientSecret: RedditclientSecret,\r\n\tusername: Redditusername,\r\n\tpassword: Redditpassword\r\n});\r\n\r\nconst num = Math.floor(Math.random() * 100);\r\n\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\ttoken: null,\r\n\t\t\tauthor_name: [],\r\n\t\t\thtml: [],\r\n\t\t\twidth: [],\r\n\t\t\theight: [],\r\n\t\t\tclass: 'hidden',\r\n\t\t\tYouTubeClientID: '',\r\n\t\t\tYouTubeClientSecret: '',\r\n\t\t\tYouTubeRedirect: '',\r\n\t\t\tuserId: null,\r\n\t\t\tvideoId: null,\r\n\t\t\tplaylistId: null\r\n\t\t};\r\n\r\n\t\tthis.getSubmission = this.getSubmission.bind(this);\r\n\t\tthis.getCredentials = this.getCredentials.bind(this);\r\n\t\tthis.validateToken = this.validateToken.bind(this);\r\n\t\tthis.getYouTubeData = this.getYouTubeData.bind(this);\r\n\t\t// this.getYouTubePlaylists = this.getYouTubePlaylists.bind(this);\r\n\t\t// this.addId = this.addId.bind(this);\r\n\t\tthis.getVideoId = this.getVideoId.bind(this);\r\n\t\tthis.addToPlaylist = this.addToPlaylist.bind(this);\r\n\t\tthis.createPlaylist = this.createPlaylist.bind(this);\r\n\t}\r\n\r\n\tgetCredentials() {\r\n\t\taxios.get('client_secret.json').then((response) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tYouTubeClientID: response.data.web.client_id,\r\n\t\t\t\tYouTubeClientSecret: response.data.web.client_secret,\r\n\t\t\t\tYouTubeRedirect: response.data.web.redirect_uris[0]\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tgetYouTubeData() {\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: 'Bearer ' + this.state.token,\r\n\t\t\t\tAccept: 'application/json'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\taxios.get('https://www.googleapis.com/youtube/v3/channels?part=snippet&mine=true', config).then((response) => {\r\n\t\t\tresponse.data.items.map((item) => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tuserId: item.id\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t// getYouTubePlaylists() {\r\n\t// \tconst config = {\r\n\t// \t\theaders: {\r\n\t// \t\t\tAuthorization: 'Bearer ' + this.state.token,\r\n\t// \t\t\tAccept: 'application/json'\r\n\t// \t\t}\r\n\t// \t};\r\n\r\n\t// \tconst url =\r\n\t// \t\t'https://www.googleapis.com/youtube/v3/playlists?part=snippet%2CcontentDetails&maxResults=25&mine=true';\r\n\r\n\t// \taxios.get(url, config).then((response) => {\r\n\t// \t\tlet playlistIds = [];\r\n\t// \t\tconsole.log(response.data.items);\r\n\t// \t\tresponse.data.items.forEach((item) => {\r\n\t// \t\t\tplaylistIds.push(item.id);\r\n\t// \t\t});\r\n\t// \t\tconsole.log(playlistIds);\r\n\t// \t\tthis.setState({\r\n\t// \t\t\tplaylistsId: playlistIds\r\n\t// \t\t});\r\n\t// \t});\r\n\t// }\r\n\r\n\tvalidateToken() {\r\n\t\tif (this.state.token) {\r\n\t\t\taxios({\r\n\t\t\t\tmethod: 'post',\r\n\t\t\t\turl: oauth2Endpoint + '?access_token=' + this.state.token\r\n\t\t\t}).then((response) => console.log(response.data));\r\n\t\t}\r\n\t}\r\n\r\n\tgetSubmission() {\r\n\t\tlet href = [];\r\n\t\tlet width = [];\r\n\t\tlet height = [];\r\n\t\tr.getSubreddit('listentothis').getTop({ time: 'month', limit: 100 }).then((response) => {\r\n\t\t\tresponse.map((sub) => {\r\n\t\t\t\t// console.log(sub.media_embed.content);\r\n\t\t\t\tconsole.log(sub);\r\n\t\t\t\thref.push(sub.media_embed.content);\r\n\t\t\t\twidth.push(sub.media_embed.width);\r\n\t\t\t\theight.push(sub.media_embed.height);\r\n\t\t\t});\r\n\t\t});\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.setState({\r\n\t\t\t\thtml: href,\r\n\t\t\t\twidth: width,\r\n\t\t\t\theight: height,\r\n\t\t\t\tclass: ''\r\n\t\t\t});\r\n\t\t}, 6000);\r\n\t}\r\n\r\n\tgetVideoId() {\r\n\t\tconsole.log(this);\r\n\t\tlet videoIdList;\r\n\t\tlet url = this.state.html[num];\r\n\t\tif (url !== undefined) {\r\n\t\t\tlet strUrl1 = url.split('/');\r\n\t\t\tlet idList = strUrl1[4].split('?');\r\n\t\t\tvideoIdList = idList[0];\r\n\t\t\tconsole.log(videoIdList);\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tvideoId: videoIdList\r\n\t\t});\r\n\t}\r\n\r\n\tcreatePlaylist() {\r\n\t\taxios({\r\n\t\t\tmethod: 'post',\r\n\t\t\turl: 'https://www.googleapis.com/youtube/v3/playlists?part=snippet%2Cstatus',\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: 'Bearer ' + this.state.token,\r\n\t\t\t\tAccept: 'application/json',\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t},\r\n\t\t\tdata: {\r\n\t\t\t\tsnippet: {\r\n\t\t\t\t\ttitle: 'Listen to This Reddit',\r\n\t\t\t\t\tdescription: 'A Playlist created by Listen to this Reddit App developed by Fiddleinc',\r\n\t\t\t\t\ttags: [ 'reddit', 'music' ],\r\n\t\t\t\t\tdefaultLanguage: 'en'\r\n\t\t\t\t},\r\n\t\t\t\tstatus: {\r\n\t\t\t\t\tprivacyStatus: 'private'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}).then((response) => {\r\n      console.log(response.data.id);\r\n      this.setState({\r\n        playlistId: response.data.id\r\n      })\r\n\t\t});\r\n\t}\r\n\r\n\taddToPlaylist() {\r\n\t\tthis.getVideoId();\r\n\t\t// this.getYouTubePlaylists();\r\n\t\tconsole.log(this.state.videoId);\r\n\t\tsetTimeout(() => {\r\n\t\t\taxios({\r\n\t\t\t\tmethod: 'post',\r\n\t\t\t\turl: 'https://www.googleapis.com/youtube/v3/playlistItems?part=snippet',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: 'Bearer ' + this.state.token,\r\n\t\t\t\t\tAccept: 'application/json',\r\n\t\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t\t},\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tsnippet: {\r\n\t\t\t\t\t\tplaylistId: this.state.playlistId,\r\n\t\t\t\t\t\tposition: 0,\r\n\t\t\t\t\t\tresourceId: {\r\n\t\t\t\t\t\t\tkind: 'youtube#video',\r\n\t\t\t\t\t\t\tvideoId: this.state.videoId\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}).then((response) => {\r\n\t\t\t\tconsole.log(response);\r\n\t\t\t});\r\n\t\t}, 5000);\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\t// r.getHot()\r\n\t\t//   .map(post => post.title)\r\n\t\t//   .then(console.log)\r\n\r\n    this.getYouTubeData();\r\n    this.createPlaylist();\r\n\t}\r\n\r\n\tcomponentWillMount() {\r\n\t\tlet _token = hash.access_token;\r\n\r\n\t\tif (_token) {\r\n\t\t\t// Set token\r\n\t\t\tthis.setState({\r\n\t\t\t\ttoken: _token\r\n\t\t\t});\r\n\t\t}\r\n\t\tthis.getSubmission();\r\n\t\tthis.getCredentials();\r\n\t\tthis.validateToken();\r\n\t}\r\n\r\n\trefreshPage() {\r\n\t\twindow.location.reload();\r\n\t}\r\n\r\n\t// addId() {\r\n\t//   document.getElementsByTagName(\"iframe\")[0].setAttribute(\"id\", \"yt\");\r\n\t// }\r\n\r\n\trender() {\r\n\t\tconst style = {\r\n\t\t\tbackground: '#F5F5F5',\r\n\t\t\tpadding: '20px'\r\n\t\t};\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<div className=\"App-header\">\r\n\t\t\t\t\t{this.state.token ? (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<div className={this.state.class} style={style}>\r\n\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\tdangerouslySetInnerHTML={{\r\n\t\t\t\t\t\t\t\t\t\t__html: this.state.html[num]\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\tonMouseEnter={this.addId}\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\twidth: this.state.width[num],\r\n\t\t\t\t\t\t\t\t\t\theight: this.state.height[num],\r\n\t\t\t\t\t\t\t\t\t\tborder: '7.5px solid #292C35'\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className={this.state.class}>\r\n\t\t\t\t\t\t\t\t<button type=\"button\" onClick={this.refreshPage} className=\"btn btn--loginApp-link\">\r\n\t\t\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\t\t\t<span>Refresh</span>\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line no-restricted-globals\r\n\t\t\t\t\t\t\t\t\tonClick={this.addToPlaylist}\r\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn--loginApp-link\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\t\t\t<span>Add To Playlist</span>\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\tclassName=\"btn btn--loginApp-link\"\r\n\t\t\t\t\t\t\t\thref={`${oauth2Endpoint}?client_id=${this.state\r\n\t\t\t\t\t\t\t\t\t.YouTubeClientID}&redirect_uri=${this.state.YouTubeRedirect.toString()}&scope=${scopes.join(\r\n\t\t\t\t\t\t\t\t\t'%20'\r\n\t\t\t\t\t\t\t\t)}&response_type=token&show_dialog=true&include_granted_scopes=true&state=state_parameter_passthrough_value`}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tLogin to YouTube\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// Replace with your app's client ID, redirect URI and desired scopes\nexport const RedditclientId = \"STQS9rsO3bTkQQ\";\nexport const RedditclientSecret = \"W7kKqk0LRvD2EeV6zg9wbWsNtyc\";\nexport const Redditusername = \"fiddle_inc\";\n// export const redirectUri = \"http://localhost:3000/redirect\";\nexport const Redditpassword = \"riochiranjib985\";\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}